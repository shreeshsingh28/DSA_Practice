Question - https://leetcode.com/problems/merge-two-sorted-lists/description/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) 
    {
        if(list1 == NULL)
            return list2;

        if(list2 == NULL)
            return list1;

        if(list1==NULL && list2==NULL)
            return NULL;

        if(list1->val > list2->val)
            swap(list1,list2);
        ListNode* t = list1;
        ListNode* head = list1;
        list1 = list1->next;

        while(list1 != NULL || list2 != NULL)
        {
            if(list1 == NULL)
            {
                t->next = list2;
                return head;
            }
            if(list2 == NULL)
            {
                t->next = list1;
                return head;
            }
            if(list1->val < list2->val)
            {
                t->next = list1;
                list1 = list1->next;
                t = t->next;
                continue;
            }
            if(list1->val > list2->val)
            {
                t->next = list2;
                list2 = list2->next;
                t = t->next;
                continue;
            }
            if(list1->val == list2->val)
            {
                t->next = list1;
                list1 = list1->next;
                t = t->next;
                t->next = list2;
                list2 = list2->next;
                t = t->next;
                continue;
            }
        }
        return head;
    }
};
